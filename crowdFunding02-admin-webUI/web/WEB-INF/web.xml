<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 关联 Tomcat 和 Spring-->
    <!-- 配置 ContextLoaderListener-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <!-- Bootstraps the root web application context before servlet initialization -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

     <!--通过过滤器指定字符集为 UTF-8-->
     <!--该 filter 必须在所有其它 filter 之前 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

        <!-- 配置参数 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>

        <!-- 设置强制编码为 true -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>

        <!-- Servlet 默认生命周期中，默认对象在第一次接收请求时被创建 -->
        <!-- 而该 Servlet 包含了和框架相关的其它初始化操作，会导致第一次请求等待时间非常场-->
        <!-- 这个 1 表示让该 Servlet 在 Application 启动时随之一同被初始化.-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!--配置方式1：拦截所有请求-->
        <!--<url-pattern>/</url-pattern>-->

        <!--配置方式2：拦截指定拓展名

            <url-pattern>*.html</url-pattern>

            优点1，静态资源完全不用经过 SpringMVC 处理。
            优点2，实现伪静态效果，虽然请求的是 html，但实际上返回的是被 java 实时渲染出的页面 (jsp) 等。
            缺点1，违背了 RESTFul 风格。
            -->
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>



</web-app>